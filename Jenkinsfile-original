node {
    
    stage('get user') {
        userVar = null
        passVar = null
        withCredentials([usernamePassword(credentialsId: 'DOCKER_ID', passwordVariable: '', usernameVariable: 'username')]) {
            userVar = username
        }
        registry = '${userVar}/appointment'
        echo "Using docker user: ${userVar}/appointment"

    }    

    environment {
        dockerImage = ''
        // registry = 'jpk912/appointment'
        registry = '${userVar}/appointment'
        echo "Using docker user2: ${userVar}/appointment"

    }

    stage('Clone repository') {
            checkout scm
    }    
       
    stage('Build apache image') {    
            sh ''' #!/bin/bash
                echo "Building apache...."
                cd apache
                docker build -t jpk/appointment-apache
            '''
            // website = docker.build("jpk912/appointment-apache", "-f apache/Dockerfile .")
    }   

    stage('Test image') {           
            sh '''
                echo "Tests would go here...."
            '''  
    }     
    
    stage('Push apache image') {
        sh ''' #!/bin/bash
            echo "Pushing Image to DockerHub...."
            docker push jpk912/appointment-apache:${env.BUILD_NUMBER}
        '''
        //push to docker-hub
        docker.withRegistry('https://registry.hub.docker.com', 'DOCKER_ID') {            
            website.push("${env.BUILD_NUMBER}")            
            website.push("latest")        
        }    
    }

    stage("Verify Docker Images") {
        sh ''' #! /bin/bash
            docker images
        '''
    }

    stage("Start app") {
        sh ''' #! /bin/bash
            echo "Starting application.."
            cd /path/to/dir
            docker-compose up --build
        '''
    }

    stage("Stop App") {
        sh ''' #! /bin/bash
            echo "Stopping application.."
            cd /path/to/dir
            docker-compose down
        '''
    }
    
}